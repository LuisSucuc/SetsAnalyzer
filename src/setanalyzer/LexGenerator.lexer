package setanalyzer;
import static setanalyzer.Token.*;


%%

%class Lexer
%type Token
%line
%column


DEFINICION = "DEFINICION"


UNIVERSO = "UNIVERSO"
LLAVE_ABIERTA     = "{"
LLAVE_CERRADA     = "}"
COMA              = ","
IGUAL             = "="
COMILLA           = "\""


LETRA_MINUSCULA = [a-z] | "ñ"
LETRA_MAYUSCULA = [A-Z] | "Ñ"
NUMERO          = 0 | [1-9][0-9]*


OPERACION          = "OPERACION"
PARENTESIS_ABIERTO = "("
PARENTESIS_CERRADO = ")"


UNION         = "&"
INTERSECCION  = "$"
DIFERENCIA    = "/"
PRODUCTO_CRUZ = "*"
COMPLEMENTO   = "^c"




WHITE       = [\t]
SPACE      = " "*
NUEVA_LINEA = \r|\n|\r\n|\t|\f


ELEMENTO = ({NUMERO}+|{LETRA_MINUSCULA}+|{LETRA_MAYUSCULA}+)+
PRIMER_ELEMENTO = {SPACE} {COMILLA} {ELEMENTO} {COMILLA} {SPACE}
SEGUNDO_ELEMENTO = {COMA} {PRIMER_ELEMENTO}


ELEMENTOS_CONJUNTO = {SPACE} {IGUAL} {SPACE} {LLAVE_ABIERTA} ({PRIMER_ELEMENTO} {SEGUNDO_ELEMENTO}*)+ {SPACE} {LLAVE_CERRADA} {SPACE}
ELEMENTOS_VACIO = {SPACE} {IGUAL} {SPACE} {LLAVE_ABIERTA} {SPACE} {LLAVE_CERRADA} {SPACE}

CONJUNTO = {LETRA_MAYUSCULA}+ {ELEMENTOS_CONJUNTO}
CONJUNTO_VACIO = {LETRA_MAYUSCULA}+ {ELEMENTOS_VACIO}
CONJUNTO_UNIVERSO = {SPACE} {UNIVERSO} {ELEMENTOS_CONJUNTO}

ID_CONJUNTO  = {SPACE} {LETRA_MAYUSCULA}+ {SPACE}
OPERACION_CONJUNTO =  ({ID_CONJUNTO} ( {UNION} | {INTERSECCION} | {DIFERENCIA} | {PRODUCTO_CRUZ} ) {ID_CONJUNTO}) | {ID_CONJUNTO} {COMPLEMENTO}
%{
   public String lexeme;
   public int line_count;
   public int column_count;
%}

%%


//Definiciones especiales

{DEFINICION}                {line_count=yyline;column_count=yycolumn; return DEFINICION;}
{CONJUNTO_UNIVERSO}         {line_count=yyline;column_count=yycolumn; return CONJUNTO_UNIVERSO;}
{CONJUNTO_VACIO}            {line_count=yyline;column_count=yycolumn; return CONJUNTO_VACIO;}
{CONJUNTO}                  {line_count=yyline;column_count=yycolumn; return CONJUNTO;}
{OPERACION_CONJUNTO}        {line_count=yyline;column_count=yycolumn; return OPERACION_CONJUNTO;}

//Definiciones por defecto
{NUEVA_LINEA}               {line_count=yyline;column_count=yycolumn; return NUEVA_LINEA;}
{WHITE}                     {/*Ignore*/}



{OPERACION}                 {line_count=yyline;column_count=yycolumn; return OPERACION;}
{COMPLEMENTO}                 {line_count=yyline;column_count=yycolumn; return COMPLEMENTO;}



. {line_count=yyline;column_count=yycolumn;return ERROR;}
