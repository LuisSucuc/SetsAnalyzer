package setanalyzer;
import static setanalyzer.Token.*;


%%

%class Lexer
%type Token
%line
%column


DEFINICION = "DEFINICION"


CONJUNTO_UNIVERSO = "UNIVERSO"
LLAVE_ABIERTA     = "{"
LLAVE_CERRADA     = "}"
COMA              = ","
IGUAL             = "="
COMILLA           = "\""


LETRA_MINUSCULA = [a-z] | "ñ"
LETRA_MAYUSCULA = [A-Z] | "Ñ"
NUMERO          = 0 | [1-9][0-9]*


OPERACION          = "OPERACION"
PARENTESIS_ABIERTO = "("
PARENTESIS_CERRADO = ")"


UNION         = "&"
INTERSECCION  = "$"
DIFERENCIA    = "/"
PRODUCTO_CRUZ = "*"
COMPLEMENTO   = "^c"




WHITE       = [\t]
SPACE      = " "
NUEVA_LINEA = \r|\n|\r\n|\t|\f

PRIMER_ELEMENTO = {SPACE}* {COMILLA} ( {NUMERO}+|{LETRA_MINUSCULA}+ |  {LETRA_MAYUSCULA}+ )  {COMILLA} {SPACE}*
SEGUNDO_ELEMENTO = {COMA}  {PRIMER_ELEMENTO}


ELEMENTOS_CONJUNTO = {SPACE}* {IGUAL} {SPACE}* {LLAVE_ABIERTA} ({PRIMER_ELEMENTO}  {SEGUNDO_ELEMENTO}*)* {SPACE}* {LLAVE_CERRADA} {SPACE}*
CONJUNTO = {LETRA_MAYUSCULA} {ELEMENTOS_CONJUNTO}
CONJUNTO_UNIVERSO = "UNIVERSO" {ELEMENTOS_CONJUNTO}

LETRA_CONJUNTO  = {SPACE}* { LETRA_MAYUSCULA} {SPACE}*
OPERACION_CONJUNTO =  ({LETRA_CONJUNTO} ( {UNION} | {INTERSECCION} | {DIFERENCIA} | {PRODUCTO_CRUZ}| {COMPLEMENTO} ) {LETRA_CONJUNTO})

%{
   public String lexeme;
   public int line_count;
   public int column_count;
%}

%%


//Definiciones especiales

{DEFINICION}                {return DEFINICION;}
{CONJUNTO_UNIVERSO}         {return CONJUNTO_UNIVERSO;}
{CONJUNTO}                  {return CONJUNTO;}
{OPERACION_CONJUNTO}        {return OPERACION_CONJUNTO;}

//Definiciones por defecto
{NUEVA_LINEA}               {return NUEVA_LINEA;}
{WHITE}                     {/*Ignore*/}
{SPACE}                     {return SPACES;}



{OPERACION}                 {return OPERACION;}
{PARENTESIS_ABIERTO}        {return PARENTESIS_ABIERTO;}
{PARENTESIS_CERRADO}        {return PARENTESIS_CERRADO;}
{UNION}                     {return UNION;}
{INTERSECCION}              {return INTERSECCION;}
{DIFERENCIA}                {return DIFERENCIA;}
{PRODUCTO_CRUZ}             {return PRODUCTO_CRUZ;}
{COMPLEMENTO}               {return COMPLEMENTO;}
{LETRA_MINUSCULA}|{NUMERO}+ {return ELEMENTO;}
{COMA}                      {return COMA;}
{IGUAL}                     {return IGUAL;}
{LLAVE_ABIERTA}             {return LLAVE_ABIERTA;}
{LLAVE_CERRADA}             {return LLAVE_CERRADA;}
{LETRA_MAYUSCULA}           {return LETRA_MAYUSCULA;}
{COMILLA}                     {return COMILLA;}



. {line_count=yyline;column_count=yycolumn;return ERROR;}